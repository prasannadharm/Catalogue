Alter table tbl_MST_CATALOG add S_PER money null
Alter table tbl_MST_CATALOG add DATE_YM datetime null
Alter table tbl_MST_CATALOG add LED_ID int null
Alter table tbl_MST_CATALOG add LED_NAME nvarchar(100) null
Alter table tbl_MST_CATALOG add DIA_CARAT numeric(18,4) null
Alter table tbl_MST_CATALOG add CREATED_ON datetime null
Alter table tbl_MST_CATALOG add MODIFIED_ON datetime null

UPdate tbl_MST_CATALOG SET DATE_YM=GETDATE()



-------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[USP_InsertCatalogMaster]  
( 	
	@CODE as nvarchar(100), 
	@TITLE as nvarchar(100), 
	@REMARKS as nvarchar(100), 
	@ACTIVE_STATUS as bit,
	@SHOW_CATALOG as bit, 
	@SHOW_TRENDING as bit, 
	@JEWELLERY_ID as int, 
	@DESIGN_ID as int, 
	@COLLECTIONS_ID as int, 
	@MATERIAL_ID as int, 
	@OCCASION_ID as int, 
	@GRAMSLAB_ID as int, 
	@KARAT_ID as int, 
	@PURITY as nvarchar(100), 
	@RATE as money, 
	@GR_WT as money, 
	@ST_WT as money, 
	@NET_WT as money, 
	@VA_PER as money, 
	@VA_AMT as money, 
	@ST_AMT as money, 
	@TAXABLE_AMT as money, 
	@TAX_PER as money, 
	@TAX_AMT as money, 
	@NET_AMT as money, 	
	@S_PER as money,
	@DATE_YM as nvarchar(30),
	@LED_NAME as nvarchar(100),
	@DIA_CARAT as money,
	@RESULT int OUT,
	@CNT int OUT,
	@MSG NVARCHAR(500) OUT  
)
as  
begin  
	BEGIN TRY
		DECLARE  @SKU as BIGINT;
		DECLARE @LED_ID as BIGINT;
		SET @RESULT = 0;
		SET @CNT =0;	
		
		SET @CODE = LTRIM(RTRIM(@CODE));
		SET @TITLE = LTRIM(RTRIM(@TITLE));
		SET @REMARKS = LTRIM(RTRIM(@REMARKS));
		SET @LED_NAME=LTRIM(RTRIM(@LED_NAME));

		IF (Len(@DATE_YM) = 10)
		BEGIN
			SET @DATE_YM = SUBSTRING(@DATE_YM, 7, 4) + '-' + SUBSTRING(@DATE_YM, 4, 2) + '-' + SUBSTRING(@DATE_YM, 1, 2);
		END
		
		SELECT @LED_ID=ID FROM tbl_MST_LEDGER WHERE NAME=@LED_NAME;
		IF (@LED_ID <=0)
		BEGIN
			SET @LED_ID = NULL;
		END

		IF (@JEWELLERY_ID <=0)
		BEGIN
			SET @JEWELLERY_ID = NULL;
		END

		IF (@DESIGN_ID <=0)
		BEGIN
			SET @DESIGN_ID = NULL;
		END

		IF (@COLLECTIONS_ID <=0)
		BEGIN
			SET @COLLECTIONS_ID = NULL;
		END

		IF (@MATERIAL_ID <=0)
		BEGIN
			SET @MATERIAL_ID = NULL;
		END

		IF (@OCCASION_ID <=0)
		BEGIN
			SET @OCCASION_ID = NULL;
		END

		IF (@GRAMSLAB_ID <=0)
		BEGIN
			SET @GRAMSLAB_ID = NULL;
		END

		IF (@KARAT_ID <=0)
		BEGIN
			SET @KARAT_ID = NULL;
		END

		SET @SKU = (SELECT ISNULL(SKU,1) FROM tbl_MST_SERIES);
	
		INSERT INTO tbl_MST_CATALOG (SKU, CODE, TITLE, REMARKS, ACTIVE_STATUS, SHOW_CATALOG, SHOW_TRENDING, JEWELLERY_ID, DESIGN_ID, COLLECTIONS_ID, MATERIAL_ID, OCCASION_ID, GRAMSLAB_ID, KARAT_ID, PURITY, RATE, GR_WT, ST_WT, NET_WT, VA_PER, VA_AMT, ST_AMT, TAXABLE_AMT, TAX_PER, TAX_AMT, NET_AMT, S_PER, DATE_YM, LED_ID, LED_NAME, DIA_CARAT,CREATED_ON) 
		SELECT @SKU, @CODE, @TITLE, @REMARKS, @ACTIVE_STATUS, @SHOW_CATALOG, @SHOW_TRENDING, @JEWELLERY_ID, @DESIGN_ID, @COLLECTIONS_ID, @MATERIAL_ID, @OCCASION_ID, @GRAMSLAB_ID, @KARAT_ID, @PURITY, @RATE, @GR_WT, @ST_WT, @NET_WT, @VA_PER, @VA_AMT, @ST_AMT, @TAXABLE_AMT, @TAX_PER, @TAX_AMT, @NET_AMT, @S_PER, cast(@DATE_YM as date), @LED_ID, @LED_NAME, @DIA_CARAT,GETDATE()
		SET @CNT = @@ROWCOUNT;

		Update tbl_MST_SERIES SET SKU=SKU+1;

		SET @RESULT = 1;
		SET @MSG = 'Data saved successfully with SKU=' + Cast(@SKU as nvarchar(100)) ;
		
	END TRY
	BEGIN CATCH		
		SET @MSG = ERROR_MESSAGE();
		SET @RESULT = 0;
	END CATCH
end

---------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[USP_UpdateCatalogMaster]  
( 	
	@ID as BIGINT,
	@CODE as nvarchar(100), 
	@TITLE as nvarchar(100), 
	@REMARKS as nvarchar(100), 
	@ACTIVE_STATUS as bit, 
	@SHOW_CATALOG as bit, 
	@SHOW_TRENDING as bit, 
	@JEWELLERY_ID as int, 
	@DESIGN_ID as int, 
	@COLLECTIONS_ID as int, 
	@MATERIAL_ID as int, 
	@OCCASION_ID as int, 
	@GRAMSLAB_ID as int, 
	@KARAT_ID as int, 
	@PURITY as nvarchar(100), 
	@RATE as money, 
	@GR_WT as money, 
	@ST_WT as money, 
	@NET_WT as money, 
	@VA_PER as money, 
	@VA_AMT as money, 
	@ST_AMT as money, 
	@TAXABLE_AMT as money, 
	@TAX_PER as money, 
	@TAX_AMT as money, 
	@NET_AMT as money, 
	@S_PER as money,
	@DATE_YM as nvarchar(30),
	@LED_NAME as nvarchar(100),
	@DIA_CARAT as money,
	@RESULT int OUT,
	@CNT int OUT,
	@MSG NVARCHAR(500) OUT  
)
as  
begin  
	BEGIN TRY
		DECLARE @LED_ID as BIGINT;
		SET @RESULT = 0;
		SET @CNT =0;		
		
		SET @CODE = LTRIM(RTRIM(@CODE));
		SET @TITLE = LTRIM(RTRIM(@TITLE));
		SET @REMARKS = LTRIM(RTRIM(@REMARKS));
		SET @LED_NAME=LTRIM(RTRIM(@LED_NAME));

		IF (Len(@DATE_YM) = 10)
		BEGIN
			SET @DATE_YM = SUBSTRING(@DATE_YM, 7, 4) + '-' + SUBSTRING(@DATE_YM, 4, 2) + '-' + SUBSTRING(@DATE_YM, 1, 2);
		END
		
		SELECT @LED_ID=ID FROM tbl_MST_LEDGER WHERE NAME=@LED_NAME;
		IF (@LED_ID <=0)
		BEGIN
			SET @LED_ID = NULL;
		END

		IF (@JEWELLERY_ID <=0)
		BEGIN
			SET @JEWELLERY_ID = NULL;
		END

		IF (@DESIGN_ID <=0)
		BEGIN
			SET @DESIGN_ID = NULL;
		END

		IF (@COLLECTIONS_ID <=0)
		BEGIN
			SET @COLLECTIONS_ID = NULL;
		END

		IF (@MATERIAL_ID <=0)
		BEGIN
			SET @MATERIAL_ID = NULL;
		END

		IF (@OCCASION_ID <=0)
		BEGIN
			SET @OCCASION_ID = NULL;
		END

		IF (@GRAMSLAB_ID <=0)
		BEGIN
			SET @GRAMSLAB_ID = NULL;
		END

		IF (@KARAT_ID <=0)
		BEGIN
			SET @KARAT_ID = NULL;
		END		
	
		Update tbl_MST_CATALOG SET CODE=@CODE, TITLE=@TITLE, REMARKS=@REMARKS, ACTIVE_STATUS=@ACTIVE_STATUS, SHOW_CATALOG=@SHOW_CATALOG, 
		SHOW_TRENDING=@SHOW_TRENDING, JEWELLERY_ID=@JEWELLERY_ID, DESIGN_ID=@DESIGN_ID, COLLECTIONS_ID=@COLLECTIONS_ID, MATERIAL_ID=@MATERIAL_ID, 
		OCCASION_ID=@OCCASION_ID, GRAMSLAB_ID=@GRAMSLAB_ID, KARAT_ID=@KARAT_ID, PURITY=@PURITY, RATE=@RATE, GR_WT=@GR_WT, ST_WT=@ST_WT, NET_WT=@NET_WT, 
		VA_PER=@VA_PER, VA_AMT=@VA_AMT, ST_AMT=@ST_AMT, TAXABLE_AMT=@TAXABLE_AMT, TAX_PER=@TAX_PER, TAX_AMT=@TAX_AMT, NET_AMT=@NET_AMT,
		S_PER=@S_PER, DATE_YM=cast(@DATE_YM as date), LED_ID=@LED_ID, LED_NAME=@LED_NAME, DIA_CARAT=@DIA_CARAT,MODIFIED_ON=GETDATE()  WHERE ID=@ID 
		
		SET @CNT = @@ROWCOUNT;		
		
		--Normalise Stock Entry
		UPDATE STK SET STK.SKU=CT.SKU, STK.CODE=CT.CODE, STK.CATALOG_TITLE=CT.TITLE FROM tbl_MST_CATALOG CT 
		INNER JOIN tbl_TRN_STOCK_SUB STK ON STK.CATALOG_ID=CT.ID WHERE CT.ID=@ID

		--Normalise Outward Entry
		UPDATE OTS SET OTS.SKU=CT.SKU, OTS.CODE=CT.CODE, OTS.CATALOG_TITLE=CT.TITLE FROM tbl_MST_CATALOG CT 
		INNER JOIN tbl_TRN_OUTWARD_SUB OTS ON OTS.CATALOG_ID=CT.ID WHERE CT.ID=@ID

		--Normalise Inward Entry
		UPDATE ITS SET ITS.SKU=CT.SKU, ITS.CODE=CT.CODE, ITS.CATALOG_TITLE=CT.TITLE FROM tbl_MST_CATALOG CT 
		INNER JOIN tbl_TRN_INWARD_SUB ITS ON ITS.CATALOG_ID=CT.ID WHERE CT.ID=@ID

		SET @RESULT = 1;
		SET @MSG = 'Data updated successfully.';
		
	END TRY
	BEGIN CATCH		
		SET @MSG = ERROR_MESSAGE();
		SET @RESULT = 0;
	END CATCH
end


----------------

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[USP_GetCatalogMasterDetailsbyID]  
(
	@ID as bigint
)
as  
begin  
	SELECT C.ID, C.SKU, C.CODE, C.TITLE, C.STK_QTY, C.REMARKS, C.ACTIVE_STATUS, C.SHOW_CATALOG, C.SHOW_TRENDING,
	C.JEWELLERY_ID, J.NAME as JEWELLERY_NAME, C.DESIGN_ID, D.NAME AS DESIGN_NAME, C.COLLECTIONS_ID, CL.NAME as COLLECTIONS_NAME, 
	C.MATERIAL_ID, M.NAME as MATERIAL_NAME, C.OCCASION_ID, O.NAME as OCCASION_NAME, C.GRAMSLAB_ID, G.NAME as GRAMSLAB_NAME, C.KARAT_ID, K.NAME as KARAT_NAME, 
	C.PURITY, C.RATE, C.GR_WT, C.ST_WT, C.NET_WT, C.VA_PER, C.VA_AMT, C.ST_AMT, C.TAXABLE_AMT, C.TAX_PER, C.TAX_AMT, C.NET_AMT,  
	cast(Cast(Isnull(C.DATE_YM, GETDATE())as date) as nvarchar) AS DATE_YM, C.S_PER, C.LED_ID, C.LED_NAME, C.DIA_CARAT
	FROM tbl_MST_CATALOG C
	LEFT JOIN tbl_MST_JEWELLERY J on C.JEWELLERY_ID=J.ID
	LEFT JOIN tbl_MST_DESIGN D on C.DESIGN_ID=D.ID
	LEFT JOIN tbl_MST_COLLECTIONS CL on C.COLLECTIONS_ID=CL.ID
	LEFT JOIN tbl_MST_MATERIAL M on C.MATERIAL_ID=M.ID
	LEFT JOIN tbl_MST_OCCASION O on C.OCCASION_ID=O.ID
	LEFT JOIN tbl_MST_GRAMSLAB G on C.GRAMSLAB_ID=G.ID
	LEFT JOIN tbl_MST_KARAT K on C.KARAT_ID=K.ID
	WHERE C.ID=@ID
	ORDER BY C.SKU 


end




----------------


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[USP_GetCatalogDetailsbyID]  
(
	@ID as bigint
)
as  
begin  
	Create table #tmpdetails(
	ID int identity(1,1),
	NAME nvarchar(200),
	VALUE nvarchar(MAX)
	)

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Title', TITLE FROM tbl_MST_CATALOG WHERE ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'SKU', SKU FROM tbl_MST_CATALOG WHERE ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Code', CODE FROM tbl_MST_CATALOG WHERE ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Jewellery', ISNULL(NAME,'') FROM tbl_MST_CATALOG C 
	INNER JOIN tbl_MST_JEWELLERY J ON  C.JEWELLERY_ID=J.ID WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Design', ISNULL(NAME,'') FROM tbl_MST_CATALOG C 
	INNER JOIN tbl_MST_DESIGN D ON  C.DESIGN_ID=D.ID WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Collection', ISNULL(NAME,'') FROM tbl_MST_CATALOG C 
	INNER JOIN tbl_MST_COLLECTIONS CC ON  C.COLLECTIONS_ID=CC.ID WHERE C.ID=@ID
	
	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Occasion', ISNULL(NAME,'') FROM tbl_MST_CATALOG C 
	INNER JOIN tbl_MST_OCCASION O ON  C.OCCASION_ID=O.ID WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Gram Slab', ISNULL(NAME,'') FROM tbl_MST_CATALOG C 
	INNER JOIN tbl_MST_GRAMSLAB G ON  C.GRAMSLAB_ID=G.ID WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Karat', ISNULL(NAME,'') FROM tbl_MST_CATALOG C 
	INNER JOIN tbl_MST_KARAT K ON  C.KARAT_ID=K.ID WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Purity', ISNULL(PURITY,'') FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Gross WT', ISNULL(GR_WT,0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Stone WT', ISNULL(ST_WT,0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Diamond Carat', ISNULL(DIA_CARAT,0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Net WT', ISNULL(NET_WT,0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID	
	
	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Stone Amt', ISNULL(ST_AMT, 0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'S(%)', ISNULL(S_PER,0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID	

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'YM', ISNULL(convert(varchar, DATE_YM, 103),'') FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Vendor', ISNULL(LED_NAME, '') FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	INSERT INTO #tmpdetails (NAME,VALUE) SELECT 'Stock', ISNULL(STK_QTY,0) FROM tbl_MST_CATALOG C WHERE C.ID=@ID

	SELECT NAME, VALUE FROM #tmpdetails ORDER BY ID

	DROP TABLE #tmpdetails;

end



--------------------------------



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[USP_UpdateLedgerMaster]  
(
	@ID as BIGINT, 
    @NAME as nvarchar(100), 
	@ALIAS_NAME as nvarchar(100),
	@LEDGER_TYPE_ID as INT, 
	@ADDRESS as nvarchar(255),
	@CITY as nvarchar(50),
	@STATE as nvarchar(50),
	@PIN_NO as nvarchar(50),
	@MOBILE as nvarchar(50),
	@TELEPHONE as nvarchar(50), 
	@EMAIL as nvarchar(100),
	@WEB as nvarchar(100),
	@GSTIN as nvarchar(50),
	@REMARKS as nvarchar(200),
	@ACTIVE_STATUS as bit,	
	@RESULT int OUT,
	@CNT int OUT,
	@MSG NVARCHAR(500) OUT  
)
as  
begin  
	BEGIN TRY
		SET @RESULT = 0;
		SET @CNT =0;
		IF EXISTS(SELECT 1 FROM tbl_MST_LEDGER WHERE UPPER(NAME)=UPPER(RTRIM(LTRIM(@NAME))) and ID<>@ID)
		BEGIN
			SET @RESULT = 2;
			SET @MSG = 'Ledger Name already exists.';
		END
		ELSE
		BEGIN
			SET @NAME = LTRIM(RTRIM(@NAME));
			SET @ALIAS_NAME = LTRIM(RTRIM(@ALIAS_NAME));
			SET @ADDRESS = LTRIM(RTRIM(@ADDRESS));
			SET @CITY = LTRIM(RTRIM(@CITY));
			SET @STATE = LTRIM(RTRIM(@STATE));
			SET @PIN_NO = LTRIM(RTRIM(@PIN_NO));
			SET @MOBILE = LTRIM(RTRIM(@MOBILE));
			SET @TELEPHONE = LTRIM(RTRIM(@TELEPHONE));
			SET @EMAIL = LTRIM(RTRIM(@EMAIL));
			SET @WEB = LTRIM(RTRIM(@WEB));
			SET @GSTIN = LTRIM(RTRIM(@GSTIN));
			SET @REMARKS = LTRIM(RTRIM(@REMARKS));
			Update tbl_MST_LEDGER  SET [NAME]=@NAME, [ALIAS_NAME]=@ALIAS_NAME, [LEDGER_TYPE_ID]=@LEDGER_TYPE_ID, [ADDRESS]=@ADDRESS, 
			[CITY]=@CITY, [STATE]=@STATE, [PIN_NO]=@PIN_NO, [MOBILE]=@MOBILE, [TELEPHONE]=@TELEPHONE, [EMAIL]=@EMAIL, 
			[WEB]=@WEB, [GSTIN]=@GSTIN, [REMARKS]=@REMARKS, [ACTIVE_STATUS]=@ACTIVE_STATUS WHERE ID=@ID;		 
			
			SET @CNT = @@ROWCOUNT;

			--Normalise Stock Entry
			UPDATE tbl_TRN_STOCK_MAIN SET LED_NAME=tbl_MST_LEDGER.NAME FROM tbl_MST_LEDGER INNER JOIN tbl_TRN_STOCK_MAIN
			ON tbl_TRN_STOCK_MAIN.LED_ID=tbl_MST_LEDGER.ID WHERE tbl_MST_LEDGER.ID=@ID;

			--Normalise Outward Entry
			UPDATE tbl_TRN_OUTWARD_MAIN SET LED_NAME=tbl_MST_LEDGER.NAME FROM tbl_MST_LEDGER INNER JOIN tbl_TRN_OUTWARD_MAIN
			ON tbl_TRN_OUTWARD_MAIN.LED_ID=tbl_MST_LEDGER.ID WHERE tbl_MST_LEDGER.ID=@ID;

			--Normalise Inward Entry
			UPDATE tbl_TRN_INWARD_MAIN SET LED_NAME=tbl_MST_LEDGER.NAME FROM tbl_MST_LEDGER INNER JOIN tbl_TRN_INWARD_MAIN
			ON tbl_TRN_INWARD_MAIN.LED_ID=tbl_MST_LEDGER.ID WHERE tbl_MST_LEDGER.ID=@ID;

			Update tbl_MST_CATALOG SET LED_NAME=@NAME WHERE LED_ID=@ID;

			SET @RESULT = 1;
			SET @MSG = 'Ledger Updated successfully.';
		END
	END TRY
	BEGIN CATCH		
		SET @MSG = ERROR_MESSAGE();
		SET @RESULT = 0;
	END CATCH
end




-------------------------


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER procedure [dbo].[USP_DeleteLedgerMaster]  
(
	@ID as int,
	@RESULT int OUT,
	@CNT int OUT,
	@MSG NVARCHAR(500) OUT   
)
AS  
BEGIN  
	BEGIN TRY
		SET @RESULT = 0;
		SET @CNT =0;
		IF Exists(Select 1 from tbl_TRN_STOCK_MAIN WHERE LED_ID=@ID)
		BEGIN
			SET @CNT = 0;
			SET @RESULT = 2;
			SET @MSG = 'This Ledger is used at Stock Entry, Delete aborted.';
		END
		ELSE IF Exists(Select 1 from tbl_TRN_INWARD_MAIN WHERE LED_ID=@ID)
		BEGIN
			SET @CNT = 0;
			SET @RESULT = 2;
			SET @MSG = 'This Ledger is used at Inward Entry, Delete aborted.';
		END
		ELSE IF Exists(Select 1 from tbl_TRN_OUTWARD_MAIN WHERE LED_ID=@ID)
		BEGIN
			SET @CNT = 0;
			SET @RESULT = 2;
			SET @MSG = 'This Ledger is used at Outward Entry, Delete aborted.';
		END
		ELSE IF Exists(Select 1 from tbl_MST_CATALOG WHERE LED_ID=@ID)
		BEGIN
			SET @CNT = 0;
			SET @RESULT = 2;
			SET @MSG = 'This Ledger is used at Calatlog Entry, Delete aborted.';
		END
		ELSE
		BEGIN
			DELETE FROM TBL_MST_LEDGER WHERE ID=@ID;
			SET @CNT = @@ROWCOUNT;
			SET @RESULT = 1;
			SET @MSG = 'Ledger deleted successfully.';	
		END
	END TRY
	BEGIN CATCH		
		SET @MSG = ERROR_MESSAGE();
		SET @RESULT = 0;
	END CATCH
END



----------------------------------





